import React, { useState, useEffect, useRef, useCallback } from 'react';
import Button from '../UIComponents/Button';

interface NumberGuessGameProps {
  onBack: () => void;
  onSelectBonusBet: (amount: number, gameType: string) => void;
  selectedBet: number | null;
  result: string;
}

const NumberGuessGame: React.FC<NumberGuessGameProps> = ({
  onBack,
  onSelectBonusBet,
  selectedBet,
  result,
}) => {
  const [targetNumber, setTargetNumber] = useState<number>(0);
  const [userGuess, setUserGuess] = useState<number | null>(null);
  const [message, setMessage] = useState<string>('');
  const [gameOver, setGameOver] = useState<boolean>(false);
  const [attempts, setAttempts] = useState<number>(0);
  const [round, setRound] = useState<number>(1);
  const [showVideo, setShowVideo] = useState<boolean>(false);
  const [isVideoAI, setIsVideoAI] = useState<boolean>(false);
  const [videoSource, setVideoSource] = useState<string>('');

  const videoRef = useRef<HTMLVideoElement>(null);
  const maxAttempts = 3;

  // Get a random video from the AI or Human folder
  const getRandomVideo = useCallback((isAI: boolean): string => {
    const prefix = isAI ? 'AI' : 'REAL';
    const maxNumber = 10; // Assuming we have up to 10 videos per category
    const randomNum = Math.floor(Math.random() * maxNumber) + 1;
    return `/Videos/${prefix} ${randomNum}.mp4`;
  }, []);

  // Set up video when showVideo changes
  useEffect(() => {
    if (showVideo) {
      const videoPath = getRandomVideo(isVideoAI);
      setVideoSource(videoPath);
    }
  }, [showVideo, isVideoAI, getRandomVideo]);

  const startNewGame = useCallback(() => {
    const newTarget = Math.floor(Math.random() * 10) + 1;
    setTargetNumber(newTarget);
    setUserGuess(null);
    setMessage('Guess a number between 1 and 10');
    setGameOver(false);
    setAttempts(0);
    setShowVideo(false);
    setRound(1);
  }, []);

  const handleVideoEnd = useCallback(() => {
    setShowVideo(false);
    setRound(2);
    setMessage('Guess if the video was AI or real (1-5 for AI, 6-10 for Real)');
  }, []);

  const handleGuess = useCallback((guess: number) => {
    if (gameOver || !selectedBet) return;

    const newAttempts = attempts + 1;
    setUserGuess(guess);
    setAttempts(newAttempts);

    if (round === 1) {
      if (guess === targetNumber) {
        setMessage('Round 1 Complete! Get ready for Round 2.');
        setIsVideoAI(Math.random() < 0.5);
        setShowVideo(true);
      } else if (newAttempts >= maxAttempts) {
        setMessage(`Game Over! The number was ${targetNumber}`);
        setGameOver(true);
      } else {
        setMessage(guess > targetNumber ? 'Try lower!' : 'Try higher!');
      }
    } else {
      // Round 2: Check if guess is correct (1-5 for AI, 6-10 for Real)
      const isAIGuess = guess <= 5;
      if (isAIGuess === isVideoAI) {
        const winnings = selectedBet * 2;
        setMessage(`Correct! You won $${winnings}!`);
        onSelectBonusBet(winnings, 'numberGuess');
      } else {
        setMessage(`Incorrect! The video was ${isVideoAI ? 'AI' : 'real'}.`);
      }
      setGameOver(true);
    }
  }, [attempts, gameOver, onSelectBonusBet, round, selectedBet, targetNumber, isVideoAI]);

  const renderVideoPlayer = () => {
    if (!showVideo) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50">
        <div className="relative w-full max-w-4xl p-4">
          <div className="relative" style={{ paddingBottom: '56.25%' }}>
            <video
              ref={videoRef}
              key={videoSource}
              autoPlay
              onEnded={handleVideoEnd}
              className="absolute inset-0 w-full h-full object-contain"
              playsInline
              controls={false}
              muted
              loop={false}
              style={{ backgroundColor: 'black' }}
            >
              <source src={videoSource} type="video/mp4" />
              Your browser does not support the video tag.
            </video>
          </div>
          <div className="text-white text-center mt-4 text-xl">
            {isVideoAI ? 'Is this video AI-generated or real?' : 'Is this video real or AI-generated?'}
          </div>
        </div>
      </div>
    );
  };

  const renderNumberButtons = () => {
    return Array.from({ length: 10 }, (_, i) => i + 1).map((num) => (
      <Button
        key={num}
        onClick={() => handleGuess(num)}
        disabled={gameOver || (round === 2 && attempts >= 1)}
        className={`w-12 h-12 m-1 rounded-full text-xl font-bold transition-colors ${
          userGuess === num
            ? 'bg-blue-600 text-white'
            : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
        } ${gameOver || (round === 2 && attempts >= 1) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
      >
        {num}
      </Button>
    ));
  };

  // Initialize the game on component mount
  useEffect(() => {
    startNewGame();
  }, [startNewGame]);

  return (
    <div className="mini-game-container p-6 max-w-2xl mx-auto bg-white rounded-lg shadow-lg">
      {renderVideoPlayer()}
      
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Number Guess - Round {round}</h2>
        <Button 
          onClick={onBack} 
          className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded"
        >
          Back to Menu
        </Button>
      </div>

      {!gameOver && round === 1 && !selectedBet && (
        <div className="mb-6">
          <p className="text-lg mb-4">Select your bet amount:</p>
          <div className="flex gap-4 justify-center">
            {[10, 20, 30].map((amount) => (
              <Button
                key={amount}
                onClick={() => onSelectBonusBet(amount, 'number')}
                className={`px-6 py-2 rounded-full ${
                  selectedBet === amount 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300'
                }`}
              >
                ${amount}
              </Button>
            ))}
          </div>
        </div>
      )}

      <div className="text-center my-8">
        {selectedBet && (
          <div className="mb-6">
            <p className="text-xl font-semibold">
              {round === 1 
                ? 'Guess a number between 1 and 10'
                : 'Was that video AI or real? (1-5: AI, 6-10: Real)'}
              }
            </p>
            <p className="text-lg text-gray-600 mt-2">
              Attempts: {attempts} / {maxAttempts}
            </p>
          </div>
        )}

        <div className="flex flex-wrap justify-center gap-2 mb-6">
          {renderNumberButtons()}
        </div>

        {message && (
          <div 
            className={`text-lg font-semibold my-4 p-3 rounded ${
              gameOver && userGuess === targetNumber 
                ? 'bg-green-100 text-green-800' 
                : gameOver 
                  ? 'bg-red-100 text-red-800' 
                  : 'bg-blue-100 text-blue-800'
            }`}
          >
            {message}
          </div>
        )}

        {gameOver && (
          <Button 
            onClick={startNewGame}
            className="mt-4 px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-full"
          >
            Play Again
          </Button>
        )}
      </div>

      {result && (
        <div className="mt-4 p-3 bg-yellow-100 text-yellow-800 rounded text-center">
          {result}
        </div>
      )}
    </div>
  );
};

export default NumberGuessGame;
